variables:
  random: &random
    min: 0
    max: 99
    step: 1
    default: 0
  range: &range
    formula: 100
  outWindow: &outWindow
    language: scala
    formula: (0.0, 25.0)
  moreINs: &moreINs
    type: ArbitraryVariable
    parameters: [0, [1]]
  endingTimeIN: &endingTimeIN
    formula: if(moreINs>0) 30.0 else 20.0
  inWindow: &inWindow
    language: scala
    formula: (0.0, endingTimeIN)
  outExpThreshold: &outExpThreshold # of an exponential rate
    formula: 6.2
  inExpThreshold: &inExpThreshold
    formula: 6.2
  maxExtension: &maxExtension
    formula: 200.0
  opTimeout: &opTimeout
    formula: 350.0
  moveFrequency: &moveFrequency
    formula: 2.0 # move once every 2.0 seconds
  speed: &speed
    min: 0.0
    max: 50.0
    step: 40.0
    default: 0.0
  failureProb: &failureProb
    formula: 0.005 # 0.5%

export:
  - time
  - molecule: outs_n # number of OUTs issued [over time]
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: outs_closed_n # number of OUTs closed [over time] (no device is running any one of them)
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: ins_n # number of INs issued [over time]
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: ins_unblocked_n # number of INs closed [over time] (no device is running any one of them)
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: running_processes # number of devices running any tuple operation [per time instant]
    aggregators: [sum,mean]
    value-filter: FilterNaN
  - molecule: outs_devs_n # number of OUT initiators [per time instant]
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: ins_devs_n # number of IN initiators [per time instant]
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: outs_timeout_n # number of IN initiators [per time instant]
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: ins_timeout_n # number of IN initiators [per time instant]
    aggregators: [sum]
    value-filter: FilterNaN

seeds:
  scenario: *random
  simulation: *random

incarnation: scafi

environment:
  type: Continuous2DEnvironment
  parameters: []

network-model:
  type: ConnectWithinDistance #*connectionType
  parameters: [*range]

pools:
  - pool: &program
      - time-distribution: # 1
          type: ExponentialTime
          parameters: [ 1.0 ] # lambda (mean freq)
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [it.unibo.experiments.SpatialTuplesStorm, 5.0] # second argument is retention time
      - program: send
  - pool: &taskGenerator
      - time-distribution:
          type: ExponentialTime
          parameters: [1.0] # lambda (mean freq)
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [it.unibo.spatialtuples.TaskGenerator, 5.0] # second argument is retention time
  - pool: &move
      - time-distribution: *moveFrequency
        type: Event
        actions:
          - type: MoveToTarget
            parameters: [ target, *speed]

displacements:
  - in:
      type: Grid
      parameters: [0, 0, 1000, 1000, 50, 50, 5, 5]
    programs:
      #- *taskGenerator
      - *move
      - *program
    contents:
      - molecule: outs_n
        concentration: 0
      - molecule: outs_closed_n
        concentration: 0
      - molecule: ins_n
        concentration: 0
      - molecule: ins_unblocked_n
        concentration: 0
      - molecule: running_processes
        concentration: 0
      - molecule: outs_devs_n
        concentration: 0
      - molecule: ins_devs_n
        concentration: 0
      - molecule: outs_timeout_n
        concentration: 0
      - molecule: ins_timeout_n
        concentration: 0
      - molecule: outWindow
        concentration: *outWindow
      - molecule: outExpThreshold
        concentration: *outExpThreshold
      - molecule: inWindow
        concentration: *inWindow
      - molecule: inExpThreshold
        concentration: *inExpThreshold
      - molecule: maxExtension
        concentration: *maxExtension
      - molecule: opTimeout
        concentration: *opTimeout
      - molecule: failureProb
        concentration: *failureProb