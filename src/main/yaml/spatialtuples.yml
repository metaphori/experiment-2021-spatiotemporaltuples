variables:
  random: &random
      min: 0
      max: 49
      step: 1
      default: 0
  range: &range
    type: ArbitraryVariable
    parameters: [100.0, [100.0,55.0]]
  moreINsInitially: &moreINsInitially # more INs than OUTs at the end of the simulation (starting lower)
    type: ArbitraryVariable
    parameters: [0, [0,1]]
  taskFactor: &taskFactor
    type: ArbitraryVariable
    parameters: [ 1, [ 1, 2 ] ]
  maxINs: &maxINs
    formula: if(moreINsInitially>0) 15*taskFactor else 10*taskFactor
  maxOUTs: &maxOUTs
    formula: if(moreINsInitially>0) 10*taskFactor else 15*taskFactor
#  endingTimeIN: &endingTimeIN
#    formula: if(moreINsInitially>0) 15.0 else 25.0
  breakeven_number: &breakeven_number
    formula: java.lang.Math.abs(maxINs-maxOUTs)+5
  surpassing_number: &surpassing_number
    formula: 5
  inWindow: &inWindow
    language: scala
    formula: (0.0, 30.0)
  outWindow: &outWindow
    language: scala
    formula: (0.0, 30.0)
  spatialWindowFactor: &spatialWindowFactor
    min: 0.0
    max: 3.0
    step: 1.0
    default: 0.0
#  spatialWindowStart: &spatialWindowStart
#    language: scala
#    formula: spatialWindowFactor * 150.0
#  spatialWindowEnd: &spatialWindowEnd
#    language: scala
#    formula: -150.0 * spatialWindowFactor + 1000
  spatialWindow: &spatialWindow
    language: scala
    formula: (0.0+100*java.lang.Double.parseDouble(spatialWindowFactor.toString()),1000.0-100*java.lang.Double.parseDouble(spatialWindowFactor.toString()))
  opExtension: &opExtension
    #type: ArbitraryVariable
    #parameters: [ 450, [ 100, 500, 800 ] ]
    language: scala
    formula: 150 + 150.0 * (4-java.lang.Double.parseDouble(spatialWindowFactor.toString()))
  outExpThreshold: &outExpThreshold # of an exponential rate
    formula: 6.2
  inExpThreshold: &inExpThreshold
    formula: 6.2
  maxExtension: &maxExtension
    formula: 200.0
  opTimeout: &opTimeout
    formula: 780.0
  moveFrequency: &moveFrequency
    formula: 2.0 # move once every 2.0 seconds
  speed: &speed
    min: 0.0
    max: 12.0
    step: 10.0
    default: 10.0
  failureProb: &failureProb
    formula: 0.005 # 0.5%
  exhaustingTime: &exhaustingTime
    formula: 400
  surpassingTime: &surpassingTime
    formula: 1000
  retainTime: &retainTime
    min: 1.0
    max: 10.0
    step: 4.0
    default: 2.0
  timeDistrib: &timeDistrib
    type: ArbitraryVariable
    parameters: [0, [0,1,2]]
  timeDistribClass: &timeDistribClass
    formula: if(timeDistrib==2) "WeibullDistribution" else if(timeDistrib==1) "ExponentialTime" else "DiracComb"
  timeDistribParams: &timeDistribParams
    formula: if(timeDistrib==2) [1.0, 0.01] else if(timeDistrib==1) [1.0] else [1.0]

layers:
  - type: it.unibo.alchemist.model.implementations.layers.UniformLayer
    molecule: max_ins
    parameters: [ *maxINs ]
  - type: it.unibo.alchemist.model.implementations.layers.UniformLayer
    molecule: max_outs
    parameters: [ *maxOUTs ]

export:
  - time #0
  - molecule: outs_n # number of OUTs issued [over time]
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: outs_closed_n # number of OUTs closed [over time] (no device is running any one of them)
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: ins_n # number of INs issued [over time]
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: ins_unblocked_n # number of INs closed [over time] (no device is running any one of them)
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: running_processes #5,6 # number of devices running any tuple operation [per time instant]
    aggregators: [sum,mean]
    value-filter: FilterNaN
  - molecule: outs_devs_n # number of OUT initiators [per time instant]
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: ins_devs_n # number of IN initiators [per time instant]
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: outs_timeout_n # number of IN initiators [per time instant]
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: ins_timeout_n  # 10 # number of IN initiators [per time instant]
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: outs_phase1
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: outs_phase2
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: outs_phase3
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: ins_phase1
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: ins_phase2 # 15
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: ins_phase3
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: lifetime
    aggregators: [sum,mean,max]
    value-filter: FilterNaN
  - molecule: doing_in # 20
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: doing_out
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: doing_in_and_out
    aggregators: [sum]
    value-filter: FilterNaN


seeds:
  scenario: *random
  simulation: *random

incarnation: scafi

environment:
  type: Continuous2DEnvironment
  parameters: []

network-model:
  type: ConnectWithinDistance #*connectionType
  parameters: [*range]

pools:
  - pool: &program
      - time-distribution: #1
          type: *timeDistribClass
          parameters: *timeDistribParams
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [it.unibo.experiments.SpatialTuplesStorm, *retainTime] # second argument is retention time
      - program: send
#  - pool: &taskGenerator
#      - time-distribution:
#          type: ExponentialTime
#          parameters: [1.0] # lambda (mean freq)
#        type: Event
#        actions:
#          - type: RunScafiProgram
#            parameters: [it.unibo.spatialtuples.TaskGenerator, 5.0] # second argument is retention time
  - pool: &move
      - time-distribution:
          type: DiracComb
          parameters: [5.0, *moveFrequency] # start at time=5, and perform 0.5 events per time unit
        type: Event
        actions:
          - type: MoveToTarget
            parameters: [ target, *speed]

displacements:
  - in:
      type: Grid
      parameters: [0, 0, 1000, 1000, 50, 50, 25, 25]
    programs:
      #- *taskGenerator
      - *move
      - *program
    contents:
      - molecule: outs_n
        concentration: 0
      - molecule: outs_closed_n
        concentration: 0
      - molecule: ins_n
        concentration: 0
      - molecule: ins_unblocked_n
        concentration: 0
      - molecule: running_processes
        concentration: 0
      - molecule: outs_devs_n
        concentration: 0
      - molecule: ins_devs_n
        concentration: 0
      - molecule: outs_timeout_n
        concentration: 0
      - molecule: ins_timeout_n
        concentration: 0
      - molecule: outWindow
        concentration: *outWindow
      - molecule: outExpThreshold
        concentration: *outExpThreshold
      - molecule: inWindow
        concentration: *inWindow
      - molecule: inExpThreshold
        concentration: *inExpThreshold
      - molecule: maxExtension
        concentration: *maxExtension
      - molecule: opTimeout
        concentration: *opTimeout
      - molecule: failureProb
        concentration: *failureProb
      - molecule: outs_phase1
        concentration: 0
      - molecule: outs_phase2
        concentration: 0
      - molecule: outs_phase3
        concentration: 0
      - molecule: ins_phase1
        concentration: 0
      - molecule: ins_phase2
        concentration: 0
      - molecule: ins_phase3
        concentration: 0
      - molecule: moreINsInitially
        concentration: *moreINsInitially
      - molecule: exhaustingTime
        concentration: *exhaustingTime
      - molecule: surpassingTime
        concentration: *surpassingTime
      - molecule: breakeven_number
        concentration: *breakeven_number
      - molecule: surpassing_number
        concentration: *surpassing_number
      - molecule: lifetime
        concentration: 0
      - molecule: op_extension
        concentration: *opExtension
      - molecule: doing_in
        concentration: false
      - molecule: doing_out
        concentration: false
      - molecule: doing_in_and_out
        concentration: false
      - molecule: spatialWindow
        concentration: *spatialWindow
